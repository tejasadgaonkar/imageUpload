{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/imageupload.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".ex3 {\\r\\n    background-color: lightblue;\\r\\n    width: 110px;\\r\\n    height: 110px;\\r\\n    overflow: auto;\\r\\n  }\\r\\n  .btnclass{\\r\\n    padding-top: 10px;height: 25px;margin:20px auto;\\r\\n    border-radius:10px;\\r\\n    -webkit-border-radius:10px;\\r\\n    box-shadow:0 1px 2px #5e5d5b;\\r\\n    text-align: center;\\r\\n    line-height: 65px; \\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    color:\\\"black\\\"\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwyQkFBMkI7SUFDM0IsWUFBWTtJQUNaLGFBQWE7SUFDYixjQUFjO0VBQ2hCO0VBQ0E7SUFDRSxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCO0lBQy9DLGtCQUFrQjtJQUNsQiwwQkFBMEI7SUFDMUIsNEJBQTRCO0lBQzVCLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkI7RUFDRiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4MyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGJsdWU7XHJcbiAgICB3aWR0aDogMTEwcHg7XHJcbiAgICBoZWlnaHQ6IDExMHB4O1xyXG4gICAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgfVxyXG4gIC5idG5jbGFzc3tcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O2hlaWdodDogMjVweDttYXJnaW46MjBweCBhdXRvO1xyXG4gICAgYm9yZGVyLXJhZGl1czoxMHB4O1xyXG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOjEwcHg7XHJcbiAgICBib3gtc2hhZG93OjAgMXB4IDJweCAjNWU1ZDViO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGluZS1oZWlnaHQ6IDY1cHg7IFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGNvbG9yOlwiYmxhY2tcIlxyXG4gIH0iXX0= */\"","module.exports = \"<nav class=\\\"navbar navbar-default\\\">\\n        \\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"navbar-header\\\">\\n            <div class=\\\"collapse navbar-collapse\\\" id=\\\"bs-example-navbar-collapse-1\\\">\\n                <ul class=\\\"nav navbar-nav\\\">\\n                    <li><a>File Upload</a></li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</nav>\\n<div class=\\\"container\\\">\\n       \\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-4\\\">\\n            <form>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"multiple\\\">Multiple</label>\\n                    <input type=\\\"file\\\" class=\\\"form-control\\\" name=\\\"multiple\\\" ng2FileSelect [uploader]=\\\"uploader\\\"\\n                        multiple />\\n                </div>\\n                <!-- <div class=\\\"form-group\\\">\\n                    <label for=\\\"single\\\">single</label>\\n                    <input type=\\\"file\\\" class=\\\"form-control\\\" name=\\\"single\\\" ng2FileSelect [uploader]=\\\"uploader\\\" />\\n                </div> -->\\n            </form>\\n        </div>\\n        <div class=\\\"col-md-8\\\">\\n            Queue length: {{ uploader?.queue?.length }}\\n\\n            <table class=\\\"table\\\">\\n                <thead>\\n                    <tr>\\n                        <th width=\\\"50%\\\">Name</th>\\n                        <th>Size</th>\\n                        <th>Progress</th>\\n                        <th>Status</th>\\n                        <th>Actions</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr *ngFor=\\\"let item of uploader.queue\\\">\\n                        <td><strong>{{ item.file.name }}</strong></td>\\n                        <td nowrap>{{ item.file.size/1024/1024 | number:'.2' }} MB</td>\\n                        <td>\\n                            <div class=\\\"progress\\\" style=\\\"margin-bottom: 0;\\\">\\n                                <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\"\\n                                    [ngStyle]=\\\"{ 'width': item.progress + '%' }\\\"></div>\\n                            </div>\\n                        </td>\\n                        <td class=\\\"text-center\\\">\\n                            <span *ngIf=\\\"item.isSuccess\\\"><i class=\\\"glyphicon glyphicon-ok\\\"></i></span>\\n                            <span *ngIf=\\\"item.isCancel\\\"><i class=\\\"glyphicon glyphicon-ban-circle\\\"></i></span>\\n                            <span *ngIf=\\\"item.isError\\\"><i class=\\\"glyphicon glyphicon-remove\\\"></i></span>\\n                        </td>\\n                        <td nowrap>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-success btn-xs\\\" (click)=\\\"item.upload()\\\"\\n                                [disabled]=\\\"item.isReady || item.isUploading || item.isSuccess\\\">\\n                                <span class=\\\"glyphicon glyphicon-upload\\\"></span> Upload\\n                            </button>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-warning btn-xs\\\" (click)=\\\"item.cancel()\\\"\\n                                [disabled]=\\\"!item.isUploading\\\">\\n                                <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span> Cancel\\n                            </button>\\n                            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-xs\\\" (click)=\\\"item.remove()\\\">\\n                                <span class=\\\"glyphicon glyphicon-trash\\\"></span> Remove\\n                            </button>\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n\\n            <div>\\n                <div>\\n                    Queue progress:{{uploader.progress}}\\n                    <div class=\\\"progress\\\" style=\\\"\\\">\\n                        <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\" [ngStyle]=\\\"{ 'width': uploader.progress + '%' }\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <button type=\\\"button\\\" class=\\\"btn btn-success btn-s\\\"\\n                    (click)=\\\"uploader.uploadAll()\\\"\\n                    [disabled]=\\\"!uploader.getNotUploadedItems().length\\\">\\n                    <span class=\\\"glyphicon glyphicon-upload\\\"></span> Upload all\\n                </button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-warning btn-s\\\" (click)=\\\"uploader.cancelAll()\\\"\\n                    [disabled]=\\\"!uploader.isUploading\\\">\\n                    <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span> Cancel all\\n                </button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-danger btn-s\\\" (click)=\\\"uploader.clearQueue()\\\"\\n                    [disabled]=\\\"!uploader.queue.length\\\">\\n                    <span class=\\\"glyphicon glyphicon-trash\\\"></span> Remove all\\n                </button>\\n                <button type=\\\"button\\\" class=\\\"btn btn-warning btn-s\\\" (click)=\\\"getAllImages()\\\"\\n                    [disabled]=\\\"!uploader.queue.length\\\">\\n                    <span class=\\\"glyphicon glyphicon-trash\\\"></span> Refresh Images\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\" style=\\\"margin-top: 10px;\\\">\\n        <div class=\\\"col-sm-12\\\"></div>\\n        <div class=\\\"card col-sm-2\\\" style=\\\"width: 15rem;margin-left: 17px;margin-top: 20px;height: 100%;\\\"\\n            *ngFor=\\\"let imagePath of images\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" (click)=\\\"removeImage(imagePath)\\\">Remove</button>\\n            <img class=\\\"col-sm-12\\\" src={{imagePath}} alt=\\\"Girl in a jacket\\\" width=\\\"100%\\\" height=\\\"100px\\\">\\n        </div>\\n\\n    </div>\\n</div>\"","import { Component } from '@angular/core';\nimport { FileUploader, FileSelectDirective } from 'ng2-file-upload/ng2-file-upload';\nimport { ImageuploadService } from './imageupload.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  images = [];\n  imageBlobUrl;falg;\n  constructor(private imageuploadService: ImageuploadService){\n  }\n  \n  ngOnInit() {\n    this.getAllImages();\n  }\n  public uploader: FileUploader = new FileUploader({ url: 'http://localhost:3001/upload' });\n\n  getAllImages() {\n    this.imageuploadService.getIds().subscribe((data) => {\n      this.images = data;\n      this.falg = true;\n    }),\n      ((error) => {\n\n      });\n  }\n  removeImage(item) {\n    const res = item.split(\"/\")[4];\n    console.log(res);\n    this.imageuploadService.deleteImage(res).subscribe((data) => {\n      this.getAllImages();\n    }),\n      ((error) => {\n\n      });\n  }\n  /* fileSelect(evt) {\n    debugger\n    let arr = [];\n    // evt.queue.forEach(element => {\n    for (let i = 0; i <= evt.queue.length; i++) {\n      let element = evt.queue[i];\n      if (element) {\n\n        if (element.file.name.split('.')[1] == 'jpg' || element.file.name.split('.')[1] == 'png' || element.file.name.split('.')[1] == 'jpeg') {\n\n        } else {\n          arr.push(false);\n        }\n        if (i == evt.queue.length - 1) {\n          if (arr.length == 0) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      }\n    };\n  } */\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FileSelectDirective } from 'ng2-file-upload';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { ImageuploadService } from './imageupload.service';\nimport { HttpClientModule } from '@angular/common/http';\n@NgModule({\n  declarations: [\n    AppComponent,\n    FileSelectDirective\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [ImageuploadService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport 'rxjs/add/operator/map';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageuploadService {\n  url = 'http://localhost:3001/'\n  constructor(private http: HttpClient) { }\n  getIds(): Observable<any[]> {\n    return this.http.get<any[]>(this.url + 'getAllIds')\n      .pipe(\n        tap(_ => console.log('fetched ids')),\n        catchError(this.handleError<any[]>('getHeroes', []))\n      );\n  }\n  deleteImage(id): Observable<{}> {\n    const url1 = `${this.url}deleteImage/${id}`;\n    console.log(id)\n    // DELETE api/heroes/42\n    return this.http.get('http://localhost:3001/deleteImage/' + id)\n      .pipe(\n        catchError(this.handleError('deleteHero'))\n      );\n    /* return this.http.post<any>('http://localhost:3001/deleteImage', id)\n      .pipe(\n        catchError(this.handleError('deleteImage', id))\n      ); */\n  }\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      // this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}